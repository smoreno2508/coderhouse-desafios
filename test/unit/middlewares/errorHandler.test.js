import errorHandler from "#middlewares/errorHandler.middleware.js";

describe('ErrorHandler', () => {
    // Generated by CodiumAI

    describe('errorHandler', () => {

        it('should return a JSON response with status code 500 and default error message when err object is undefined', () => {
            const req = {};
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };
            const next = jest.fn();

            errorHandler(undefined, req, res, next);

            expect(res.status).toHaveBeenCalledWith(500);
            expect(res.json).toHaveBeenCalledWith({
                status: 500,
                error: 'Internal Server Error'
            });
        });

        it('should return a JSON response with status code and custom error message from err object', () => {
            const req = {};
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };
            const next = jest.fn();
            const err = {
                statusCode: 400,
                message: 'Bad Request'
            };

            errorHandler(err, req, res, next);

            expect(res.status).toHaveBeenCalledWith(400);
            expect(res.json).toHaveBeenCalledWith({
                status: 400,
                error: 'Bad Request'
            });
        });

        it('should return a JSON response with status code from err object\'s statusCode property', () => {
            const req = {};
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };
            const next = jest.fn();
            const err = {
                statusCode: 404
            };

            errorHandler(err, req, res, next);

            expect(res.status).toHaveBeenCalledWith(404);
            expect(res.json).toHaveBeenCalledWith({
                status: 404,
                error: 'Internal Server Error'
            });
        });

        it('should return a JSON response with custom error message from err object\'s message property', () => {
            const req = {};
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };
            const next = jest.fn();
            const err = {
                message: 'Not Found'
            };

            errorHandler(err, req, res, next);

            expect(res.status).toHaveBeenCalledWith(500);
            expect(res.json).toHaveBeenCalledWith({
                status: 500,
                error: 'Not Found'
            });
        });

        it('should return a JSON response with custom error message and status code from err object', () => {
            const req = {};
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn()
            };
            const next = jest.fn();
            const err = {
                statusCode: 400,
                message: 'Bad Request'
            };

            errorHandler(err, req, res, next);

            expect(res.status).toHaveBeenCalledWith(400);
            expect(res.json).toHaveBeenCalledWith({
                status: 400,
                error: 'Bad Request'
            });
        });
    });



})